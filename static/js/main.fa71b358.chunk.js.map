{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","users","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","console","log","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa71b358.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ( { robots } ) => {\r\n  // console.log('Cardlist');\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map( (users, i) => {\r\n          return(\r\n            <Card \r\n              key={robots[i].id} \r\n              id={robots[i].id} \r\n              name={robots[i].name} \r\n              email={robots[i].email}\r\n              />\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default CardList;\r\n\r\n// another way to write this:\r\n\r\n// const CardList = ( { robots } ) => {\r\n//   const cardArray = robots.map( (user, i) => {\r\n//       return (\r\n//          <Card \r\n//       key={robots[i].id} \r\n//       id={robots[i].id} \r\n//       name={robots[i].name} \r\n//       email={robots[i].email}\r\n//       />\r\n//       );\r\n//   })\r\n//   return (\r\n//   <div>\r\n//     {cardArray}\r\n//   </div>\r\n//   )\r\n// }","import React from 'react';\r\n\r\nconst SearchBox = ( { searchfield, searchChange } ) => {\r\n  // console.log('Searchbox');\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='Search Robots' \r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'  }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0,\r\n    };\r\n  };\r\n  \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return {count: this.state.count + 1}\r\n    })\r\n  };\r\n\r\n  render () {\r\n    // console.log('CounterButton');\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  };\r\n};\r\n\r\nexport default CounterButton","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  // what would make this particular command dangerous is that, if false, it will NEVER update, even of props, a state, or something changes. Usually, it is set to true.\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return false;\r\n  // };\r\n\r\n  render () {\r\n    // console.log('Header');\r\n    return (\r\n      <div>\r\n       <h1 className='f1'>RoboFriends</h1>\r\n       <CounterButton color={'red'} />\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots()) //same as doing requestRobots(dispatch)\r\n    };\r\n};\r\n\r\n// so it seems like the state is the parent, the objects in it are the children (props). \r\n\r\nclass App extends Component {\r\n\r\n//     constructor() {\r\n//         super()\r\n//         this.state = {\r\n//             robots: [],\r\n//             // searchfield: ''\r\n//         }\r\n//         console.log('constructor');\r\n//     };\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchfield: event.target.value })\r\n    //         console.log(this.state.searchfield);\r\n    // };\r\n\r\n    // componentDidMount() {\r\n    //     fetch('https://jsonplaceholder.typicode.com/users')\r\n    //     .then(response => response.json())\r\n    //     .then(users => this.setState({ robots: users }));\r\n    // };\r\n\r\n     componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    };\r\n\r\n    render() {\r\n        // const { robots, searchfield } = this.state; // can remove because we are using redux and don't need the searchfield that was once active there.\r\n        // const { robots } = this.state;\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            // return robot.name.toLowerCase().includes(searchfield.toLowerCase()) // commented out after using redux.\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ?\r\n        // return  (!robots.length) ? //!robots.length is saying the same thing as robots.length === 0\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    {/* <SearchBox searchChange={this.onSearchChange} /> */}\r\n                    <SearchBox searchChange={onSearchChange} /> \r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n                // calling robots from state, and state is calling robots from importing robots.js file. CarldList has a map function breaking down the objects for each index\r\n            )        \r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //connect accepts 2 perameters","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED \n} from './constants.js';\n\n\nexport const setSearchField = (text) => {\n    console.log(text);\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n};\n\nexport const requestRobots = () => (dispatch) => {  //this is creating a \"higher order function\"\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\n//before using redux-thunk middleware\n// export const requestRobots = (dispatch) => {\n//     dispatch({ type: REQUEST_ROBOTS_PENDING});\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(response => response.json())\n//     .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n//     .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n// }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED \n} from './constants.js';\n\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    console.log(action.type);\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n};\n\n// export const searchRobots = (state=initialState, action={}) => {\n//     switch(action.type) {\n//         case CHANGE_SEARCH_FIELD:\n//             return {...state, searchField: action.payload }\n//     }\n// }\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign( {}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign( {}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign( {}, state, {error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = \ncreateStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n                    \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}